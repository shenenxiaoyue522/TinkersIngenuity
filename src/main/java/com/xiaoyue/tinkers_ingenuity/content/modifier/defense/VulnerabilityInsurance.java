package com.xiaoyue.tinkers_ingenuity.content.modifier.defense;

import com.xiaoyue.tinkers_ingenuity.TinkersIngenuity;
import com.xiaoyue.tinkers_ingenuity.content.generic.ISimpleModule;
import com.xiaoyue.tinkers_ingenuity.content.generic.SerialLoader;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.EquipmentSlot;
import org.jetbrains.annotations.Nullable;
import slimeknights.mantle.data.loadable.primitive.FloatLoadable;
import slimeknights.mantle.data.loadable.primitive.IntLoadable;
import slimeknights.mantle.data.loadable.record.RecordLoadable;
import slimeknights.mantle.data.registry.GenericLoaderRegistry;
import slimeknights.tconstruct.library.modifiers.Modifier;
import slimeknights.tconstruct.library.modifiers.ModifierEntry;
import slimeknights.tconstruct.library.modifiers.ModifierHooks;
import slimeknights.tconstruct.library.modifiers.hook.armor.ModifyDamageModifierHook;
import slimeknights.tconstruct.library.modifiers.hook.build.ModifierRemovalHook;
import slimeknights.tconstruct.library.module.HookProvider;
import slimeknights.tconstruct.library.module.ModuleHook;
import slimeknights.tconstruct.library.tools.context.EquipmentContext;
import slimeknights.tconstruct.library.tools.nbt.IToolStackView;

import java.util.List;

public record VulnerabilityInsurance(float protect, int max)
        implements ISimpleModule, ModifyDamageModifierHook, ModifierRemovalHook {

    public static final ResourceLocation KEY = TinkersIngenuity.loc("vulnerability_insurance");
    public static final RecordLoadable<VulnerabilityInsurance> LOADER = RecordLoadable.create(
            FloatLoadable.ANY.requiredField("protect", VulnerabilityInsurance::protect),
            IntLoadable.ANY_FULL.requiredField("max", VulnerabilityInsurance::max),
            VulnerabilityInsurance::new
    );

    @SerialLoader
    public static void onInit() {
        TinkersIngenuity.REGISTRATE.module("vulnerability_insurance_modifier", LOADER);
    }

    @Override
    public float modifyDamageTaken(IToolStackView tool, ModifierEntry modifier, EquipmentContext context, EquipmentSlot slot, DamageSource source, float amount, boolean direct) {
        CompoundTag tag = tool.getPersistentData().getCompound(KEY);
        if (tag.getString("id").equals(source.getMsgId())) {
            int origin = tag.getInt("lv");
            tag.putInt("lv", Math.min(origin + 1, this.max));
            return amount * (1.0F - (float)origin * this.protect);
        } else {
            tag.putString("id", source.getMsgId());
            tag.putInt("lv", 1);
            return amount;
        }
    }

    @Override
    public @Nullable Component onRemoved(IToolStackView tool, Modifier modifier) {
        tool.getPersistentData().remove(KEY);
        return null;
    }

    @Override
    public List<ModuleHook<?>> getDefaultHooks() {
        return HookProvider.defaultHooks(ModifierHooks.MODIFY_HURT, ModifierHooks.REMOVE);
    }

    @Override
    public RecordLoadable<? extends GenericLoaderRegistry.IHaveLoader> getLoader() {
        return LOADER;
    }

    public static VulnerabilityInsurance getIns() {
        return new VulnerabilityInsurance(0.05F, 9);
    }
}
