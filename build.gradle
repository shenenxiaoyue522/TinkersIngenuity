buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${mod_version}"
group = "xiaoyue.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    mavenLocal();
}

if(lljij){
    jarJar.enable()
    tasks.jarJar.configure {
        archiveClassifier.set('')
    }
    jar {
        archiveClassifier.set('slim')
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    if (rootMod.toBoolean()) {
        implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
            transitive = false
            jarJar.ranged(it, "[${mixin_extras_version},)")
        }
    } else {
        implementation("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")
    }
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation fg.deobf(jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "[MC1.20,MC1.21)"))

    implementation fg.deobf("xiaoyue.celestial_core:celestial_core:1.4.0-slim")
    implementation fg.deobf(jarJar(group: 'xiaoyue.celestial_invoker', name: 'celestial_invoker', version: "[1.0.0,)"))

    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tconstruct_version}")

    implementation fg.deobf("dev.xkmc.l2tabs:l2tabs:0.3.1")
    implementation fg.deobf(jarJar(group: 'dev.xkmc.l2serial', name: 'l2serial', version: "[1.2.2,)"))
    implementation fg.deobf(jarJar(group: 'dev.xkmc.l2damagetracker', name: 'l2damagetracker', version: "[0.3.8,)"))
    implementation fg.deobf(jarJar(group: 'dev.xkmc.l2library', name: 'l2library', version: "[2.4.23,)"))

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
    implementation fg.deobf("curse.maven:patchouli-306770:4636277")
    implementation fg.deobf("curse.maven:farmersdelight-398521:5051242")

    runtimeOnly fg.deobf("curse.maven:attributefix-280510:4588114")
    runtimeOnly fg.deobf("curse.maven:bookshelf-228525:4581675")
    runtimeOnly fg.deobf("curse.maven:enchantment-descriptions-250419:4587429")
    runtimeOnly fg.deobf("curse.maven:caelus-308989:4581481")
    runtimeOnly fg.deobf("curse.maven:elytra-slot-317716:4598379")

}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : "celestial_core",
                'Specification-Vendor'    : "xiaoyue",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "xiaoyue",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}


// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
